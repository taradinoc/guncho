B/typet: Types Template.
 
@Purpose: To set up the atomic kinds of value (the base data types, in other
words) within NI.
 
@-------------------------------------------------------------------------------

@p Header.
The following mass of type definitions is not heavily subdivided into
paragraphs since it's read so early in NI's run that ``Include...''
sentences haven't had time to be read yet -- so they aren't easy to
customise. (Except by putting a whole customised version of the file into
the relevant |Materials/I6T| folder.)

The |{-lines:type}| command causes all subsequent lines to be sent as
parameters to the |{-type:...}| command, until the next |{-endlines}|
command.

@c
{-callv:make_type_IDs_table}
{-lines:type}

#DEFAULTS:
defined-in-source-text:no
is-incompletely-defined:no
is-a-unit:no
is-an-enumeration:no
uses-signed-comparisons:no
can-coincide-with-property:no
named-values-created-with-assertions:no
used-in-let-without-casts:no
can-be-type-of-global-variable:no
has-i6-GPR:no
i6-printing-routine:DecimalNumber
i6-printing-routine-actions:DA_Name
block-data:no
multiple-block:no
constant-compilation-method:none
index-priority:4

@p Macros.
New kinds of value cause some I7 source to be generated, following various
combinations of the macros below.

@c
*UNDERSTOOD-VARIABLE:
<type> understood is a <type> which varies.
*END

*PRINTING-ROUTINE:
To say (value - <type>):
	(- print (<printing-routine>) {value}; -).
*END

*PRINTING-ROUTINE-BLOCK:
To say (value - <type>):
	(- print (<printing-routine>) {-pointer-to:value}; -).
*END

*RANDOM-CHOOSERS:
To decide which <type> is a random <lower-case-type> between (first value - <type>) and (second value - <type>) - <type-number>:
	(- R_<printing-routine>({first value}, {second value}) -).

To decide which <type> is a random <lower-case-type> from (first value - <type>) to (second value - <type>) - <type-number>:
	(- R_<printing-routine>({first value}, {second value}) -).
*END

*ENUMERATION-CHOOSERS:
To decide which <type> is <lower-case-type> after (X - <type>) - <type-number>:
	(- A_<printing-routine>({X}) -).

To decide which <type> is <lower-case-type> before (X - <type>) - <type-number>:
	(- B_<printing-routine>({X}) -).

To decide which <type> is a random <lower-case-type> - <type-number>:
	(- R_<printing-routine>() -).

*END

@p Group 1.
These are data types used in type-checking but not representing specific
kinds of value at run-time.

The |+| notation indicates a type name which NI requires us to construct,
and with this specific name.

@c
+ANY_VALUE_TY:
description:a value
singular:value
plural:values
constant-compilation-method:none
cast:<all>
! Matches any value

+ASSIGNABLE_VALUE_TY:
description:a value
singular:assignable-value
plural:assignable-values
constant-compilation-method:none
cast:<assignable>
! Matches any value which can be the rvalue of an assignment

ANY_POINTER_VALUE_TY:
description:a value
singular:pointer value
constant-compilation-method:none
cast:<pointer>
! Matches any value where the I6 representation is a pointer to a block

ANY_WORD_VALUE_TY:
description:a value
singular:word value
constant-compilation-method:none
cast:<word>
! Matches any value where the I6 representation is a single word

+KIND_OF_POINTER_VALUE_TY:
description:the name of a kind of complex value
singular:kind of pointer value
constant-compilation-method:none
! Matches name of kind of value pointing to a block, compiles to NI type number

+KIND_OF_WORD_VALUE_TY:
description:the name of a kind of simple value
singular:kind of word value
constant-compilation-method:none
! Matches name of kind of value in a single word, compiles to NI type number

CLASSIFIED_TY:
description:some text or the name of a room, thing or rule
singular:miscellaneous-value
plural:miscellaneous-values
used-in-let-with-cast-priority:50
constant-compilation-method:none
cast:OBJECT_TY
cast:TEXT_TY
cast:TEXT_ROUTINE_TY
cast:RULE_TY
! Deprecated: a union of the four I6-metaclass-distinguishable data types

+VALUE_DESCRIPTION_TY:
description:a description of values
singular:domain-description
plural:domain-descriptions
constant-compilation-method:special
! Used only in type-checking to distinguish value from object descriptions

TEMPLATE_VAR1_TY:
is-template-variable:yes
template-variable-number:1
description:template variable 1
singular:kov marker 1
plural:kov marker 1s
! Used in template matches

TEMPLATE_VAR2_TY:
is-template-variable:yes
template-variable-number:-1
description:template variable 1 reference
singular:kov reference 1
plural:kov reference 1s
! Used in template matches

TEMPLATE_VAR3_TY:
is-template-variable:yes
template-variable-number:2
description:template variable 2
singular:kov marker 2
plural:kov marker 2s
! Used in template matches

TEMPLATE_VAR4_TY:
is-template-variable:yes
template-variable-number:-2
description:template variable 2 reference
singular:kov reference 2
plural:kov reference 2s
! Used in template matches

+NO_ENTRIES_TY:
description:no entries
constant-compilation-method:none
! Used for the type of the empty list { }

@p Group 2.
Data types for basic word-sized values.

@c
+NUMBER_TY:
description:a number
documentation-reference:kind_number
singular:number
plural:numbers
quasinumerical:yes
has-i6-GPR:yes
explicit-i6-GPR:DECIMAL_TOKEN
i6-printing-routine-actions:DA_Number
used-in-let-with-cast-priority:10
can-be-type-of-global-variable:yes
uses-signed-comparisons:yes
can-exchange:yes
default-value:0
index-default-value:0
specification-text:Whole number in the range -32768, -32767, ..., -2, -1, 0, 1, 2, 3, ..., 32767: small numbers can be written textually as 'one', 'two', 'three', ..., 'ten', 'eleven', 'twelve'. (A much larger number range is allowed if we compile the source to Glulx rather than the Z-machine: see the Settings panel.)
index-priority:1
constant-compilation-method:literal

+TIME_TY:
description:a time
documentation-reference:kind_time
singular:time
plural:times
quasinumerical:yes
used-in-let-with-cast-priority:20
can-be-type-of-global-variable:yes
uses-signed-comparisons:yes
can-exchange:yes
default-value:540
loop-domain-schema:for (*1=0: *1<TWENTY_FOUR_HOURS: *1++)
has-i6-GPR:yes
explicit-i6-GPR:TIME_TOKEN
i6-printing-routine:PrintTimeOfDay
i6-printing-routine-actions:PrintTimeOfDay
specification-text:A time of day, written in the form '2:34 AM' or '12:51 PM', or a length of time such as '10 minutes' or '3 hours 31 minutes', which must be between 0 minutes and 23 hours 59 minutes inclusive.
index-default-value:9:00 AM
index-priority:1
constant-compilation-method:literal
apply-template:*PRINTING-ROUTINE

+TEXT_TY:
description:some text
singular:text
plural:texts
used-in-let-with-cast-priority:30
can-be-type-of-global-variable:yes
default-value:EMPTY_TEXT_VALUE
i6-printing-routine:PrintText
index-default-value:""
specification-text:Some text in double quotation marks, perhaps with substitutions written in square brackets.
index-priority:3
cast:TEXT_ROUTINE_TY
sometimes-cast:CLASSIFIED_TY
constant-compilation-method:special
! Because of casting, this can be text either with or without substitutions

+OBJECT_TY:
description:an object
singular:object
plural:objects
used-in-let-with-cast-priority:40
can-be-type-of-global-variable:yes
default-value:nothing
index-default-value:nothing
index-priority:2
i6-printing-routine:PrintShortName
i6-printing-routine-actions:DA_Name
sometimes-cast:CLASSIFIED_TY
constant-compilation-method:special
specification-text:Objects are values intended to simulate physical things: places, people, things, and so on. They come in many kinds. The special value 'nothing' is also allowed, and can be used to mean 'no object at all'.
! For any single specific object (direction, room, thing, etc.), or "nothing"

+TEXT_ROUTINE_TY:
description:some text with substitutions
singular:text-routine
plural:text-routine
sometimes-cast:CLASSIFIED_TY
constant-compilation-method:special
! Quoted text which certainly does contain substitutions

+QUOT_TY:
description:some formatted text without substitutions
singular:boxed-quotation
plural:boxed-quotations
constant-compilation-method:special
! Quoted text used only for I6 box quotation statements, without substitutions

+SNIPPET_TY:
description:a snippet
documentation-reference:kind_snippet
singular:snippet
plural:snippets
can-be-type-of-global-variable:yes
default-value:101
index-default-value:<i>word 1 of command</i>
specification-text:A fragment of the player's most recent typed command, taking in a run of consecutive words.
index-priority:5
i6-printing-routine:PrintSnippet
constant-compilation-method:none
apply-template:*PRINTING-ROUTINE
! Numerical reference to a word range (indicated by word counts) in the command

+UNICODECHAR_TY:
description:a Unicode character
singular:unicode-character
plural:unicode-characters
constant-compilation-method:literal
! For constants like "unicode 65" or "unicode black knight chess piece" only

+OBJECT_DESCRIPTION_TY:
description:a description
documentation-reference:kind_description
singular:description
plural:descriptions
used-in-let-without-casts:yes
can-be-type-of-global-variable:yes
default-value:Prop_Falsity
index-default-value:<i>matching nothing</i>
index-priority:5
constant-compilation-method:special
specification-text:A description of objects - say, 'animals which are in closed containers' - may not look like a value, but it is. Writing 'the number of visible women', for instance, actually applies the phrase 'number of...' to the value 'visible women', this being a description. (We very rarely need to know this, but occasionally it's useful to store descriptions or do other value-related things with them.)
! Routine determining whether its argument is an object matching a description

+USEOPTION_TY:
description:the name of a use option
singular:use-option
plural:use-options
constant-compilation-method:special
! Constants only: the name of a use option, stored as its internal number

+PROPERTY_TY:
description:a property of something
singular:property
plural:properties
constant-compilation-method:special
unassignable:yes
! Used for names of properties such as "closed" or "carrying capacity"

+RULE_TY:
description:the name of a rule
documentation-reference:kind_rule
singular:rule
plural:rules
used-in-let-with-cast-priority:60
can-be-type-of-global-variable:yes
default-value:LITTLE_USED_DO_NOTHING_R
i6-printing-routine:RulePrintingRule
index-default-value:the little-used do nothing rule
sometimes-cast:CLASSIFIED_TY
cast:RULEBOOK_TY
constant-compilation-method:special
apply-template:*PRINTING-ROUTINE
specification-text:One of many, many rules which determine what happens during play. Rules can be triggered by scenes beginning or ending, by certain actions, at certain times, or in the course of carrying out certain activities.
indexed-grey-if-empty:yes
! Routine to test if a rule applies and carry it out if so

RULE_OUTCOME_TY:
description:a rule outcome
singular:outcome
plural:outcomes
constant-compilation-method:none
apply-template:*PRINTING-ROUTINE
! Used fleetingly to handle return values from rules (success, failure, none)

+RULEBOOK_TY:
modifying-adjective:action-based
modifying-adjective:object-based
description:the name of a rulebook
documentation-reference:kind_rulebook
singular:rulebook
plural:rulebooks
can-be-type-of-global-variable:yes
default-value: 0
loop-domain-schema:for (*1=0: *1<NUMBER_RULEBOOKS_CREATED: *1++)
index-default-value:the action-processing rules
constant-compilation-method:special
i6-printing-routine:RulePrintingRule
specification-text:A list of rules to follow, in sequence, to get something done. A rulebook is like a ring-binder, with the individual rules as sheets of paper. Inform normally sorts these into their 'natural' order, with the most specific rules first, but it's easy to shuffle the pages if you need to. When some task is carried out during play, Inform is normally working through a rulebook, turning the pages one by one.
indexed-grey-if-empty:yes
! A list of rules to be followed in sequence

+RULEBOOK_OUTCOME_TY:
description:the name of a rulebook outcome
singular:rulebook-outcome
plural:rulebook-outcomes
i6-printing-routine:RulebookOutcomePrintingRule
constant-compilation-method:special
apply-template:*PRINTING-ROUTINE
! Used to handle return values from rulebooks, which can be named and varied

+ACTION_NAME_TY:
description:an action name
documentation-reference:kind_actionname
singular:action-name
plural:action-names
can-be-type-of-global-variable:yes
default-value:##Wait
index-default-value:waiting action
constant-compilation-method:special
i6-printing-routine:SayActionName
apply-template:*PRINTING-ROUTINE
specification-text:An action is what happens when one of the people in the simulated world decides to do something. A full action would be something like 'dropping the box', but an action name is just the choice of which sort of thing is being done: here, it's 'the dropping action'. (Action names are always written with the word 'action' at the end, to make sure they aren't mistaken for full actions.)
! To refer to an action in abstract, without any of the nouns it applies to

+ACTIVITY_TY:
description:an activity
documentation-reference:kind_activity
singular:activity
plural:activities
constant-compilation-method:special
can-be-type-of-global-variable:yes
used-in-let-with-cast-priority:80
default-value:PRINTING_THE_NAME_ACT
index-default-value:printing the name
specification-text:An activity is something which Inform does as part of the mechanics of play - for instance, printing the name of an object, which Inform often has to do. An activity can happen by itself ('printing the banner text', for instance) or can be applied to an object ('printing the name of something', say).
! The name of an activity, stored as its internal number

+SCENE_TY:
description:a scene
documentation-reference:kind_scene
singular:scene
plural:scenes
named-values-created-with-assertions:yes
can-be-type-of-global-variable:yes
used-in-let-with-cast-priority:80
default-value: 0
loop-domain-schema:for (*1=1: *1<=NUMBER_SCENES_CREATED: *1++)
index-default-value:the Entire Game
index-priority:2
i6-printing-routine:PrintSceneName
constant-compilation-method:quantitative
apply-template:*PRINTING-ROUTINE
specification-text:Like a scene in a play: a period of time which is usually tied to events in the plot. Scenes are created by sentences like 'Midnight Arrival is a scene.'
indexed-grey-if-empty:yes
! Scenes, as numbered in sequence in order of creation (from 0 not 1)

+TABLE_TY:
description:the name of a table
documentation-reference:kind_tablename
singular:table-name
plural:table-names
used-in-let-with-cast-priority:70
can-be-type-of-global-variable:yes
default-value:TheEmptyTable
loop-domain-schema:for (*2=0, *1=TableOfTables-->*2: *1: *2++, *1=TableOfTables-->*2)
index-default-value:<i>a table with no rows or columns</i>
i6-printing-routine:PrintTableName
constant-compilation-method:special
apply-template:*PRINTING-ROUTINE
specification-text:Like tables of information in a book or newspaper, tables in Inform hold values which have been organised into rows and columns. A table-name is just a single value, identifying which table is meant - say, 'Table of US Presidents' might be a table-name value.
indexed-grey-if-empty:yes
! Tables, stored as their array addresses inside the virtual machine

+TABLE_COLUMN_TY:
description:the name of a column
singular:table-column
plural:table-columns
constant-compilation-method:special
! Constants only: a table column name, by which its kind of value can be known

+EQUATION_TY:
description:the name of an equation
singular:equation-name
plural:equation-names
used-in-let-with-cast-priority:70
can-be-type-of-global-variable:yes
default-value:0
index-default-value:<i>an equation doing nothing</i>
i6-printing-routine:DA_Number
apply-template:*PRINTING-ROUTINE
constant-compilation-method:special
specification-text:Like formulae in a textbook or a scientific paper, equations in Inform are written out in displayed form and given names.
indexed-grey-if-empty:yes
! Equations, not stored at run-time

+RELATION_TY:
description:a relation
singular:abstract-relation
plural:abstract-relations
constant-compilation-method:special
! Constants only: a relation name, stored as its index in a run-time table

+UNDERSTANDING_TY:
description:a topic
singular:topic
plural:topics
i6-printing-routine-actions:DA_Topic
cast:TEXT_TY
cast:TEXT_ROUTINE_TY
constant-compilation-method:special
! I6 general parsing routine to match some specified text

+FIGURENAME_TY:
description:the name of a figure
documentation-reference:kind_figurename
singular:figure-name
plural:figure-names
can-be-type-of-global-variable:yes
used-in-let-with-cast-priority:80
default-value:1
loop-domain-schema:for (*2=0, *1=TableOfFigures-->*2: *1: *2++, *1=TableOfFigures-->*2)
index-default-value:figure of cover
constant-compilation-method:literal
i6-printing-routine:PrintFigureName
apply-template:*PRINTING-ROUTINE
specification-text:When made with the Glulx setting, an Inform project can include images as well as words, and these are called figures. A figure-name is just the name of one of the figures in the current project.
indexed-grey-if-empty:yes
! Blorb resource ID number for a picture

+SOUNDNAME_TY:
description:the name of a sound effect
documentation-reference:kind_soundname
singular:sound-name
plural:sound-names
can-be-type-of-global-variable:yes
used-in-let-with-cast-priority:80
constant-compilation-method:literal
default-value:0
loop-domain-schema:for (*2=0, *1=TableOfSounds-->*2: *1: *2++, *1=TableOfSounds-->*2)
index-default-value:<i>a silent non-sound</i>
i6-printing-routine:PrintSoundName
apply-template:*PRINTING-ROUTINE
specification-text:When made with the Glulx setting, an Inform project can include sound effects or pieces of music. A sound-name is just the name of one of these sounds in the current project.
indexed-grey-if-empty:yes
! Blorb resource ID number for a sound effect

+EXTERNALFILE_TY:
description:the name of a file
documentation-reference:kind_externalfile
singular:external-file
plural:external-files
can-be-type-of-global-variable:yes
used-in-let-with-cast-priority:80
default-value:0
loop-domain-schema:for (*2=0, *1=TableOfExternalFiles-->*2: *1: *2++, *1=TableOfExternalFiles-->*2)
index-default-value:<i>a non-file</i>
constant-compilation-method:special
i6-printing-routine:PrintExternalFileName
apply-template:*PRINTING-ROUTINE
specification-text:When made with the Glulx setting, an Inform project can make limited use of files stored on the computer which is operating the story at run-time. An external-file is just the name of one of these files (not the filename in the usual sense, but a name given to it in the Inform source text).
indexed-grey-if-empty:yes
! Address of an array holding a file I/O structure managed at run-time

+TRUTH_STATE_TY:
description:something which is either true or false
documentation-reference:kind_truthstate
singular:truth state
plural:truth states
can-be-type-of-global-variable:yes
default-value:false
index-default-value:false
loop-domain-schema:for (*1=0: *1<=1: *1++)
has-i6-GPR:yes
explicit-i6-GPR:TRUTH_STATE_TOKEN
i6-printing-routine:DA_TruthState
i6-printing-routine-actions:DA_TruthState
used-in-let-with-cast-priority:50
can-exchange:yes
specification-text:The state of whether something is 'true' or 'false'. (In other computing languages, this might be called 'boolean', after the 19th-century logician George Boole, who first realised this was a kind of value.)
index-priority:2
constant-compilation-method:literal
apply-template:*PRINTING-ROUTINE-BLOCK

+DESCRIPTION_OF_ACTION_TY:
description:a stored action
constant-compilation-method:special
! To represent an action test implicitly cast as a conditional rvalue

+INTERMEDIATE_TY:
description:the intermediate result of some complex calculation
quasinumerical:yes
i6-printing-routine:DA_Number
i6-printing-routine-actions:DA_Number
! Used when typechecking arithmetic in dimensional formulae

@p Group 3.
Data types for block-sized values; those where the I6 representation at
run-time is a pointer to a block of memory, usually on the heap.

@c
+INDEXED_TEXT_TY:
description:an indexed text
documentation-reference:kind_indexedtext
used-in-let-without-casts:yes
can-be-type-of-global-variable:yes
singular:indexed text
plural:indexed texts
block-data:yes
has-native-constants:no
multiple-block:yes
heap-size-estimate:256
cast:TEXT_TY
cast:TEXT_ROUTINE_TY
cast:SNIPPET_TY
constant-compilation-method:none
recognition-only-GPR:INDEXED_TEXT_TY_ROGPR
distinguisher:INDEXED_TEXT_TY_Distinguish
i6-printing-routine:INDEXED_TEXT_TY_Say
apply-template:*PRINTING-ROUTINE-BLOCK
can-exchange:yes
index-default-value:""
specification-text:A flexible-length form of text which can be internally altered and searched. Inform automatically changes text to this format when necessary.
index-priority:3
! A flexible-length, character-accessible string of text

+STORED_ACTION_TY:
description:a stored action
documentation-reference:kind_storedaction
used-in-let-without-casts:yes
can-be-type-of-global-variable:yes
comparison-schema:DESCRIPTION_OF_ACTION_TY>>>*=-((STORED_ACTION_TY_Adopt(*1), SAT_Tmp-->0=(*2), STORED_ACTION_TY_Unadopt()))
singular:stored action
plural:stored actions
block-data:yes
has-native-constants:yes
multiple-block:no
heap-size-estimate:16
constant-compilation-method:special
distinguisher:STORED_ACTION_TY_Distinguish
i6-printing-routine:STORED_ACTION_TY_Say
apply-template:*PRINTING-ROUTINE-BLOCK
can-exchange:yes
index-default-value:waiting
specification-text:A stored action, which can later be tried.
index-priority:3
! A stored action, which can later be tried

+LIST_OF_TY:
is-constructor:yes
description:a list of
documentation-reference:kind_listof
used-in-let-without-casts:yes
can-be-type-of-global-variable:yes
singular:list of
plural:lists of
block-data:yes
has-native-constants:no
multiple-block:yes
heap-size-estimate:256
constant-compilation-method:special
distinguisher:LIST_OF_TY_Distinguish
i6-printing-routine:LIST_OF_TY_Say
apply-template:*PRINTING-ROUTINE-BLOCK
can-exchange:yes
index-default-value:{ }
specification-text:A flexible-length list of values, where all of the items have to have the same kind of value as each other - for instance, a list of rooms, or a list of lists of numbers. The empty list, with no items yet, is written { }, and a list with items in is written with commas dividing them - say {2, 5, 9}.
index-priority:3
! A list of numbers, for now

@p Groups 4 and 5.
Enumerations and units.

@c
! New kinds of value are initially given these settings:

#NEW:
is-incompletely-defined:yes
named-values-created-with-assertions:yes
is-a-unit:no
is-an-enumeration:no
can-coincide-with-property:yes
defined-in-source-text:yes
can-be-type-of-global-variable:yes
description:a designed type

! When the source text specifies either a named constant value, or a literal
! pattern, it decides whether the new type is to be an enumeration or a unit,
! at which point one of the following macros is applied to the type:

#ENUMERATION:
is-incompletely-defined:no
is-an-enumeration:yes
named-values-created-with-assertions:yes
used-in-let-without-casts:yes
can-be-type-of-global-variable:yes
default-value:1
index-default-value:<first-constant>
index-priority:2
has-i6-GPR:yes
uses-signed-comparisons:yes
can-exchange:yes
description:a designed type
constant-compilation-method:quantitative
apply-template:*PRINTING-ROUTINE
apply-template:*UNDERSTOOD-VARIABLE
apply-template:*RANDOM-CHOOSERS
apply-template:*ENUMERATION-CHOOSERS

#UNIT:
quasinumerical:yes
is-incompletely-defined:no
is-a-unit:yes
uses-signed-comparisons:yes
can-exchange:yes
defined-in-source-text:yes
named-values-created-with-assertions:no
used-in-let-without-casts:yes
can-be-type-of-global-variable:yes
default-value:0
index-default-value:<0-in-literal-pattern>
index-priority:1
has-i6-GPR:yes
constant-compilation-method:literal
apply-template:*PRINTING-ROUTINE
apply-template:*UNDERSTOOD-VARIABLE
apply-template:*RANDOM-CHOOSERS

@p Tail.

@c
{-endlines}
{-callv:complete_type_IDs_table}
